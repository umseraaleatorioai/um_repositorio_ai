
/**
 * You can edit, run, and share this code.
 * play.kotlinlang.org
 */
fun fun main() {
  
 //println("o println serve para exibir textos no console") 

//----------------------------------------------------------------------------------------------
/*
fun main() {
  
   println("Eduardo: ei o Caio,é impressão minha ou você ta ficando mais calvo?")
    
    println("Caio:nada a ver mano a sua visão ta muito ruim em")  
    
    println("Lucas:o que esperar de uma pessoa míope em")
    
    println("Lucas:mas caio antes que você fale algo, você tambem é míope -_- ")
   
    println("Caio:vocês estão bem doidos, eu não sou míope e também não sou calvo")  
    
    println("Eduardo:você já se olhou no espelho?")  
    
    println("Lucas:ele é míope, o que ele consegue enxergar bem?,parando pra pensar acho que nada")  
    
    println("Lucas:mas vocês sabem de uma coisa né")  
    
    println("Eduardo e Caio: o que é?")  
   
    println("que vocês dois são calvos e míopes,depois olha a foto que eu mandei pra vocês")  
    
    println("Prof Gabriel Eduardo: que é que vocês estão conversando?")
    println("Eduardo,Caio e Lucas: nada de interesante professor")
}
//Variáeis- armazenam valores,dados,informações
//val - não mutável - não podemos alterar seu valor
//var- mutável- podemos alterar se valor

//Tipos de variáveis
//Sring -
//Int -
//Foat - 
//Duble -
//Log -
//Bolean -
}
*/
---------------------------------------------------------------------------- 
fun main() {
  
   
//Variáeis- armazenam valores,dados,informações
//val - não mutável - não podemos alterar seu valor
//var- mutável- podemos alterar se valor
/*
//Tipos de variáveis
//
////Sring - armazena valores de tipo texto - dentro de "" => ex: "leao"
//Int - armazena números inteirios => 7042
//Foat - armazena números reais (no geral) - necessita de um f no valor ==> 72.24f
//Duble - armazena números quebrado (de forma arredondada) ==> 7.15  
//Log - armazena números longos ==> 57487543875458374.286940 
//Bolean - verdadeiro ou falso => true, false 
//
var cr7 = "Cristiano Ronaldo" 
var numerosChampions = 5 
var altura = 1.87

//concatenação
 
print("O nome dele é "+ cr7 +",ele tem" + numerosChampions )
print("titúlos de champions league e ele tem "+ altura + "de altura SIIIUUU eu sou milior" )

var lapulga = " Lionel Messi"
var champions = 4
var alturaDele = 1.02
 println("O nome dele é $lapulga, ele tem $champions, e ele tem apenas $alturaDele")
 
var tklu = "Lucas Pereira"  
var minhaIdade = 15
var minhaAltura = 1.66
var euGosto = " Jogar, comer,etc.."
var sobreMim = ("eu tenho alguns problemas na cabeça por causa da minha família e amigos")

println("o meu nome é $tklu, minha idade é $minhaIdade")
println("a minha altura é $minhaAltura, eu gosto de $euGosto, e sobre mim $sobreMim")
*/

    
//operadores matemáticos
//
// + => adição
// - =>subtração
// * => mutiplicação
// / =>divisão
// % => módulo - resto de uma divisão 
//

//println(45/7)
//
//operadores Relacionados
//
//
//== => igual
//!= => diferente 
// > => maior que...
// < => menor que...
// >= -> maior ou igual ...
// <= -> menor ou igual a...

}
---------------------------------------------------------------------------------------------------------------------------------------------
//

var n1 = 3
var n2 = 5
println( "SO ESTOU COM POUCO DE ÓDIO DISSO SABE >:(" )
println(" ****    >:(   CALCULADORA CHATA DO CARAMBA(NAO PASSA MAIS ISSO PELO AMOR DE DEUS PROF) -_-  ****")
println("** Adição entre $n1 e $n2 >:(**")
println("** o resultado da adição é: >:(**" + (n1 + n2))
println("** subtração entre $n1 e $n2 >:(**")
println("** o resultado da subtração é: >:(**" + (n1 - n2))
println("** multiplicação entre $n1 e $n2 >:(**")
println("** o resultado da multiplicação é: >:( **" + (n1 * n2))
println("** Divisão entre $n1 e $n2 **")
println("** o resultado da Divisão é: **" + (n1 / n2))
println("******>:(      >:(      >:(        >:(       >:(      >:(*****") 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------



















fun main() {
  
 //condições   
 //
 //condições simples
 //
 //      if --> se..
 // else --> senão
 
  /*
 var lembreiDoChocolate = "Sim"    
    
  if(lembreiDoChocolate == "Sim "){  
     
      printl("Vou entregar o chocolate para você")
  }else
    println("Chocolate pra todo mundo!!")
    */
    /*
    var coracoes = -1
        
if(coracoes == 10){
   println("Você está ótimo!! Bom pra você")
}else if(coracoes == 7){   
    println("ce ta ok, pode cumer um miojo")
}else if (coracoes == 4){    
   println("você não muito bem se cuida! culp do miojo") 
}else if (coracoes == 1){
    println("Você vai jogar no vasco, vai ser atacante")    
}else{
println("bem vindo ao vasco atacante :)") }
    
    
}
//se a condição for verdadeira, sua ação sera executada, senão, outra ação será
//executada
//condições compostas
{
*/
     
 var idade = 18   
    
 if(idade <= 3){   
    println("você é um nenê")
 }else if(idade <=12){
     println("você é muito infantil!!")
 }else if(idade <= 18){
     println("tu é jovem! aproveite a vida")
 }else if (idade <= 60){  
   println("tu é adulto!! pague a conta") 
 }else if(idade > 60){
    println("Que que há velhinho")
 }else{
  println("Você não existe!!!")
 }
 
 ----------------------------------------------------------------------------------------------------------------------------------------------------------
 fun main() {

 //Laços de repetição   
 //   
 // while - enquanto
 // for - para
 // do..while - faça.. enquanto
 // repeat - repita  
      
  // laço while
  // enquanto uma determinada condição for verdadeira, outra determinada
  // ação sera executada
  // 
  //estrutura do while
  //
  // while(condição){
  // ação
  // } 
  /*
  var number = 0
    
   while(number <= 47){
          println(number)
          number++
   }
   */
    
    
    // laço do.. while
    // 
    // uma determinada ação sera executada, enquanto outra determinada condição for 
    // verdadeira
    // estrutura do do.. while
    // do{
    // ação
    // } while (condição)
     /* 
    var idade = 1 
    
    do{
      println("$idade anos? cresça, sério")  
      idade++  
    }while(idade <17)
     */
//exercício -> O ano Não é bissexto, portanto o ano possui 365 dias,precisa ser exibido no
//console, os números de 1 a 365, usando no mínimo umma variável, usando os Laços while e 
//do.. while  
/*
var ano = 1
while(ano < 366){
          println(ano)
          ano++
}
*/


var ano = 1 
    
    do{
      println(ano)  
      ano++  
    }while(ano <366)



}
//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
//Laços de repetição
//
//for - para...
//
//for - para cada item em uma lista/ ou qualquer tipo de coleção, será executado uma
//determinada ação
//
// Estrutura do for:
// for (item in lista/collection/intervalo){
// ação
// }
//  
 /*
 for(item in 1..10){
      println(item)
*/
/*
for(item in 1..10){    
    println(item * 8)
    */
    
    repeat(18){
    println(" :) tartaruga")
}
}

//exercício: faça a tabuada de um número dee sua escolha (sem a do 0,1, do 2 e do 10)              
//. obseração: precisa utilizar o laço for               
//
// repeat - repita...             
//
// uma determinada ação será repetida um determianada número de vezes
// 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 fun main() {
    //Collections - Coleções 
    //
    // <> --> tags - servem para especificar o tipo de valor a ser listado
    //
    // São determinados conjuntos de itens/valores que podem ser modelados e utilizados
    // em determinados métodos e operações 
    // 
    // List - listas
    // 
    // listOf --> listam itens de variados tipos 
    // 
    /*
    //var genericList = mutableListOf("São Paulo, arroz e pamonha", 25.7f, 23.974, '$', false) 
    //println(genericList)
    var specificList = listOf<String>("Cruzeiro do Roberto Carlos", "Calleri","5")
    println(specificList)
    */
    
// Index - uma posição da collection
 
    //Propriedades - list 
    //
    // .lastIndex 
    // .size 
    // 
    // 
    //println(specificList.lastIndex)
    //println(specificList.first())
   //println(genericList.size) 
   //
   //println(specificList.get(0))
   // println(specificList.indexOf("Cruzeiro do Roberto Carlos"))
    
    
    //Métodos - listOf
    /*
    genericList.add(2, "easy")
    println(genericList)
    genericList.remove(23.974)
    println(genericList) 
    genericList.removeAt(3)
    println(genericList)
    genericList.set(0, "tartaruga")
    println(genericList)
    genericList.clear()
    println(genericList)
    */
    /*
    var anotherList = setOf("Pedro", "Diniz", "Pelé", "Ronaldinho", "Marília Mendonza", "Diniz")
    println(anotherList) 
    */
    /*
    var animal = mutableMapOf("tartaruga" to 0, "jabuti" to 1, "Tucano" to 2, "Hiena" to 3, "Mamaco" to 4)
    println(animal)
    
    animal.put("capivara incrível", 5)
    println(animal)
    animal.put("leopardo", 9)
    println(animal)
    animal.replace("tatu",3)
    */
     //POO
     //
     // progamação Orientada a objetos 
     //    
     // Objetos - estados (características: nome, idade, cpf,)
     // 
     // Comportamentos - (andar, comer, dormir, conversar, programar)          
     //
     // Classes - Modelos que servem para construção de objetos derivados
     //
     /*
    val pessoa1 = Pessoa()
     pessoa1.nome = "Keyla"
     println(pessoa1.nome)
     pessoa1.cpf = "445.177.465.78"
     println(pessoa1.cpf)
     println(pessoa1.idade)
     println(pessoa1.altura)
     
}

class Pessoa(){
    //declaração de atributos para a classe Pessoa
    var nome = ""
    var cpf  = ""
    var idade = 99 
    var altura = 1.74
    */
}
// Exercício - Faça uma ficha médica, apontando os resultados do último checkup de um cliente
// permitido usar a mesma classe pessoa()
 
    var nome = ""
    var cpf  = ""
    var idade = 99 
    var altura = 1.74
    var tem algum problema de saúde?
    var já teve alguma doença contagiosa?
    var tem alguma alergia?
    var tem alergia a um tipo de medicamento
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------    
   O RESULTADO DO MEU EXERCÍCIO 
    
    val pessoa1 = Pessoa()
     pessoa1.nome = "Keyla"
     println(pessoa1.nome)
     pessoa1.cpf = "445.177.465.78"
     println(pessoa1.cpf)
     println(pessoa1.idade)
     println(pessoa1.altura)
     pessoa1.problemadsaúde = "sim"
     println(pessoa1.problemadsaúde)
     pessoa1.tpdsangue = "AB-"
     println(pessoa1.tpdsangue)
     pessoa1.talergia = "N"
     println(pessoa1.talergia)

}

class Pessoa(){
    //declaração de atributos para a classe Pessoa
    
    

   var nome = ""
    var cpf  = ""
    var idade = 99 
    var altura = 1.74
    var problemadsaúde = ""
    var tpdsangue = ""
    var talergia = ""   
        
}
// Exercício - Faça uma ficha médica, apontando os resultados do último checkup de um cliente
// permitido usar a mesma classe pessoa()
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------    
  val pessoa1 = Pessoa()
     pessoa1.nome = "Keyla"
     println(pessoa1.nome)
     pessoa1.cpf = "445.177.465.78"
     println(pessoa1.cpf)
     println(pessoa1.idade)
     println(pessoa1.altura)
     pessoa1.problemadsaúde = "sim"
     println(pessoa1.problemadsaúde)
     pessoa1.tpdsangue = "AB-"
     println(pessoa1.tpdsangue)
     pessoa1.talergia = "N"
     println(pessoa1.talergia)
     
      










}

class Pessoa(){
    //declaração de atributos para a classe Pessoa
    
    

   var nome = ""
    var cpf  = ""
    var idade = 99 
    var altura = 1.74
    var problemadsaúde = ""
    var tpdsangue = ""
    var talergia = ""   
        
}
// Exercício - Faça uma ficha médica, apontando os resultados do último checkup de um cliente
// permitido usar a mesma classe pessoa()    
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------y    
  fun main() {
    
   var jogador1 = JogadorDeFutebol("Capivara" , "PSG", 20, "Brasil", "Puma", "Zagueiro", 999.0 ) 
   println(jogador1.nome,)
    println(jogador1.numero)
     println(jogador1.posicao)
    
    
    
    
    var jogador2 = JogadorDeFutebol("Luffy" , "PSG", 20, "Brasil", "Puma", "Zagueiro", 999.0 ) 
   println(jogador2.nome,)
    println(jogador2.numero)
     println(jogador2.posicao)
    
    
    var jogador3 = JogadorDeFutebol("Calvonaro" , "PSG", 22, "Brasil", "Puma", "meio-campo", 999.0 ) 
    println(jogador3.nome,)
    println(jogador3.numero)
     println(jogador3.posicao)
    
    
    
    var jogador4 = JogadorDeFutebol("jabuti" , "PSG", 17, "Brasil", "Puma", "lateral direita", 999.0 ) 
    println(jogador4.nome,)
    println(jogador4.numero)
     println(jogador4.posicao)
    
    
    var jogador5 = JogadorDeFutebol("flash" , "PSG", 2, "Brasil", "Puma", "atacante", 999.0 ) 
     println(jogador5.nome,)
    println(jogador5.numero)
     println(jogador5.posicao)
    
    
    
    var jogador6 = JogadorDeFutebol("gustavao" , "PSG", 7, "Brasil", "Puma", "lateral esquerda", 999.0 ) 
    println(jogador6.nome,)
    println(jogador6.numero)
     println(jogador6.posicao)
    
    
    
    var jogador7 = JogadorDeFutebol("pereira" , "PSG", 29, "Brasil", "Puma", "volante", 999.0 ) 
    println(jogador7.nome,)
    println(jogador7.numero)
    println(jogador7.posicao)
    
    var jogador8 = JogadorDeFutebol("educalvo" , "PSG", 1, "Brasil", "Puma", "goleiro", 999.0 ) 
    println(jogador8.nome,)
    println(jogador8.numero)
    println(jogador8.posicao)
    
    
    var jogador9 = JogadorDeFutebol("cailvo" , "PSG", 11, "Brasil", "Puma", "ponta esquerda", 999.0 )
    println(jogador9.nome,)
    println(jogador9.numero)
    println(jogador9.posicao)
   
   
    var jogador10 = JogadorDeFutebol("goku" , "PSG", 8, "Brasil", "Puma", "ponta direita", 999.0 ) 
    println(jogador10.nome,)
    println(jogador10.numero)
    println(jogador10.posicao)
    
    
    var jogador11 = JogadorDeFutebol("izuku midorya" , "PSG", 10, "Brasil", "Puma", "atacante", 999.0 ) 
    println(jogador11.nome,)
    println(jogador11.numero)
    println(jogador11.posicao)              
 
    
    
    
    
    
    
    
    
    
    
    
    
    
    /*
 //Exercício - Faça a escalação do seu time exibindo nome, numero da camisa e posição 
 //no mínimo
 //permitido inverntar jogadores  
  */ 

}
class JogadorDeFutebol(var nome: String,
                      var time: String,
                      var numero: Int,
                      var nacionalidade: String,
                      var patrocinio: String,
                      var posicao: String,
                      var preco: Double){ 
 









}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------  
fun main() {
    /*
    var jogador1 = JogadorDeFutebol("Capivara" , 20, "Brasil",  "Zagueiro", 999.0 ) 
   println(jogador1.nome,)
    println(jogador1.numero)
     println(jogador1.posicao)
    
    
    
    
    var jogador2 = JogadorDeFutebol("Luffy" , 20, "Brasil",  "Zagueiro", 999.0 ) 
   println(jogador2.nome,)
    println(jogador2.numero)
     println(jogador2.posicao)
    
    
    var jogador3 = JogadorDeFutebol("Ednaldo pereira" , 22, "Brasil", "meio-campo", 999.0 ) 
    println(jogador3.nome,)
    println(jogador3.numero)
     println(jogador3.posicao)
    
    
    
    var jogador4 = JogadorDeFutebol("jabuti" , 17, "Brasil",  "lateral direita", 999.0 ) 
    println(jogador4.nome,)
    println(jogador4.numero)
     println(jogador4.posicao)
    
    
    var jogador5 = JogadorDeFutebol("flash" , 2, "Brasil", "atacante", 999.0 ) 
     println(jogador5.nome,)
    println(jogador5.numero)
     println(jogador5.posicao)
    
    
    
    var jogador6 = JogadorDeFutebol("gustavao" , 7, "Brasil",  "lateral esquerda", 999.0 ) 
    println(jogador6.nome,)
    println(jogador6.numero)
     println(jogador6.posicao)
    
    
    
    var jogador7 = JogadorDeFutebol("pereira" , 29, "Brasil", "volante", 999.0 ) 
    println(jogador7.nome,)
    println(jogador7.numero)
    println(jogador7.posicao)
    
    var jogador8 = JogadorDeFutebol("educalvo" , 1, "Brasil",  "goleiro", 999.0 ) 
    println(jogador8.nome,)
    println(jogador8.numero)
    println(jogador8.posicao)
    
    
    var jogador9 = JogadorDeFutebol("cailvo" , 11, "Brasil",  "ponta esquerda", 999.0 )
    println(jogador9.nome,)
    println(jogador9.numero)
    println(jogador9.posicao)
   
   
    var jogador10 = JogadorDeFutebol("goku" , 8, "Brasil",  "ponta direita", 999.0 ) 
    println(jogador10.nome,)
    println(jogador10.numero)
    println(jogador10.posicao)
    
    
    var jogador11 = JogadorDeFutebol("izuku midorya" , 10, "Brasil",  "atacante", 999.0 ) 
    println(jogador11.nome,)
    println(jogador11.numero)
    println(jogador11.posicao)              
 
     var jogador12 = JogadorDeFutebol("sanji" , 10, "Brasil", , "atacante", 999.0 ) 
    println(jogador120.nome,)
    println(jogador12.numero)
    println(jogador12.posicao)              
    */
    
    
    
    
    
    
    
    
    
    
    
    
    /*
 //Exercício - Faça a escalação do seu time exibindo nome, numero da camisa e posição 
 //no mínimo
 //permitido inverntar jogadores  
  */ 



//Métodos/funções - são um grupo de ações que representam uma determinada atividade de um 
//determinado objeto
//
// Estrutura de um método no Kotlin
// 
// fun nomeDela (parametros  se tiver){
// ações
// }
// 
// var nomeDoObjeto = ClasseDele
// 
// nomeDoObjeto.nomeDela


















}
class JogadorDeFutebol(var nome: String,
                      var numero: Int,
                      var posicao: String){  

    
    
    
    
    
    
    
    
    
    
    

    
}    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    





